/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;

import controleur.Sommet;
import java.awt.BorderLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.Box;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import modele.ModeleTable;
import org.graphstream.algorithm.ConnectedComponents;
import org.graphstream.graph.Edge;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.view.View;
import org.graphstream.ui.view.Viewer;
/**
 *
 * @author Corentin
 */



public class Fenetre extends javax.swing.JFrame {
    
    
    
    private Graph g;
    private List<Sommet> listeSommets;
    private List<Edge> listeArretes;
    private ModeleTable modele;
            
    private static void add(View view) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * Creates new form Fenetre
     */
    public Fenetre() {
        
        modele = new ModeleTable();
        initComponents();
        this.pack();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        listeSommets = new ArrayList<Sommet>();
        listeArretes = new ArrayList<Edge>();
        
        g = new SingleGraph("graphe" );
        g.addAttribute("ui.quality");
        g.addAttribute("ui.antialias");
        g.addAttribute("ui.stylesheet","node { shape: circle;"
                + " fill-color: #EEE; "
                + "shape: rounded-box;  "
                + " text-size: 20px;"
                + "text-alignment :center; "
                + "stroke-mode: plain; "
                + "stroke-color: #333; "
                + "size:25px;"
                + " } "
                + "edge { fill-color: #333; "
                + " text-size: 20px;}");

        
        Viewer vue = new Viewer(g, Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
        vue.enableAutoLayout();

        View view = vue.addDefaultView(false);
        panel1.setLayout(new BorderLayout());
        panel1.add((Component) view, BorderLayout.CENTER);

        this.add("Center", panel1);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ScrollerTableau1 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        connexityField = new javax.swing.JTextField();
        sumDegreesField = new javax.swing.JTextField();
        sizeField = new javax.swing.JTextField();
        orderField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GraphApp");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Caractèristiques du graphe");

        jLabel2.setText("Ordre :");

        jLabel3.setText("Taille :");

        jLabel4.setText("Total des degrés  :");

        jLabel5.setText("Connexe :");

        jButton1.setText("Ajouter un sommet");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ajouter une arrête");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Table1.setModel(modele);
        Table1.setColumnSelectionAllowed(true);
        ScrollerTableau1.setViewportView(Table1);
        Table1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        connexityField.setEditable(false);
        connexityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connexityFieldActionPerformed(evt);
            }
        });

        sumDegreesField.setEditable(false);
        sumDegreesField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumDegreesFieldActionPerformed(evt);
            }
        });

        sizeField.setEditable(false);
        sizeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeFieldActionPerformed(evt);
            }
        });

        orderField.setEditable(false);
        orderField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderFieldActionPerformed(evt);
            }
        });

        jButton3.setText("Supprimer un sommet");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Supprimer une arrête");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Ouvrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollerTableau1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connexityField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(sumDegreesField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(jLabel3)
                                .addGap(30, 30, 30)
                                .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orderField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jButton1)
                                .addGap(42, 42, 42)
                                .addComponent(jButton2)
                                .addGap(35, 35, 35)
                                .addComponent(jButton3)
                                .addGap(37, 37, 37)
                                .addComponent(jButton4)))
                        .addGap(0, 345, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(panel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connexityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sumDegreesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(ScrollerTableau1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(169, 169, 169))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         
        
        JPanel myPanel = new JPanel();
        String[] listeNomsSommets = new String[listeSommets.size()];
        
        for(int i = 0; i < listeSommets.size(); i++){
            listeNomsSommets[i] = listeSommets.get(i).getNom();
        } 
        
        JList sommet1 = new JList(listeNomsSommets);
        JList sommet2 = new JList(listeNomsSommets);
              

        myPanel.add(new JLabel("Premier sommet :"));
        myPanel.add(sommet1);
         myPanel.add(new JLabel("Deuxième sommet :"));
        myPanel.add(sommet2);

        int result = JOptionPane.showConfirmDialog(null, myPanel,"Saisir le nom des deux sommets", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String s1 = (String) sommet1.getSelectedValue();
            String s2 = (String) sommet2.getSelectedValue();
            g.addEdge(s1.concat(s2), s1, s2);
            g.getEdge(s1.concat(s2)).setAttribute("ui.label",s1.concat(s2));
            
            listeArretes.add(g.getEdge(s1.concat(s2)));
            
            for(int i = 0; i < listeSommets.size(); i++){
                if(listeSommets.get(i).getNom().equals(s1) ){
                    listeSommets.get(i).setDegre(listeSommets.get(i).getDegre() + 1);
                    listeSommets.get(i).addSommetsAdjacents(s2);
                }
                
            } 
            
            for(int i = 0; i < listeSommets.size(); i++){
                if(listeSommets.get(i).getNom().equals(s2) ){
                    listeSommets.get(i).setDegre(listeSommets.get(i).getDegre() + 1);
                    listeSommets.get(i).addSommetsAdjacents(s1);
                }
                
            } 
            updateTable();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        JPanel myPanel = new JPanel();
        JTextField sommet = new JTextField(5);
        boolean test = false;

        myPanel.add(new JLabel("Nom du sommet :"));
        myPanel.add(sommet);
        int result;
        do{
        result = JOptionPane.showConfirmDialog(null, myPanel,"Saisir le nom du sommet à ajouter", JOptionPane.OK_CANCEL_OPTION);

        for(int i = 0; i < listeSommets.size(); i++){
            if(listeSommets.get(i).getNom().equals(sommet.getText())){
                   test = true;
            }
            else{
                test = false;
            }
        }       

        }while(test && result == JOptionPane.OK_OPTION );

        if (result == JOptionPane.OK_OPTION) {
          String s = sommet.getText();
          g.addNode(s);
          g.getNode(s).setAttribute("ui.label", s);
          
          listeSommets.add(new Sommet(s, g.getNode(s).getDegree()));
           updateTable();
        }
      
      
        
          
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void connexityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connexityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_connexityFieldActionPerformed

    private void sumDegreesFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumDegreesFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sumDegreesFieldActionPerformed

    private void sizeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeFieldActionPerformed

    private void orderFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderFieldActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      
        String[] listeNomsSommets = new String[listeSommets.size()];
        
        for(int i = 0; i < listeSommets.size(); i++){
            listeNomsSommets[i] = listeSommets.get(i).getNom();
        } 
        
        if (listeNomsSommets.length == 0){
            
            JOptionPane.showMessageDialog(null,"Aucun sommet à supprimer.");
        }
        else{
        
            String node = (String) JOptionPane.showInputDialog(null, "Chosir le sommet que vous souhaitez supprimer :",
             "Suppression de sommet", JOptionPane.QUESTION_MESSAGE, null, listeNomsSommets, listeNomsSommets[0]); 

            g.removeNode(node);

            for(int i = 0; i < listeSommets.size(); i++){
                 if(listeSommets.get(i).getNom().equals(node)){
                        listeSommets.remove(i);
                 }
             }  

            for(int i = 0; i < listeSommets.size(); i++){
                 if(listeSommets.get(i).getSommetsAdjacents().contains(node)){
                        listeSommets.get(i).getSommetsAdjacents().remove(node);
                        listeSommets.get(i).setDegre(listeSommets.get(i).getDegre() - 1);
                 }
             }  

            updateTable();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        String[] listeNomsArretes = new String[listeArretes.size()];
        
        for(int i = 0; i < listeArretes.size(); i++){
            
            listeNomsArretes[i] = listeArretes.get(i).getId();
        } 
        if (listeNomsArretes.length == 0){
            
            JOptionPane.showMessageDialog(null,"Aucune arrête à supprimer.");
        }
        else{
            
            String edge = (String) JOptionPane.showInputDialog(null, "Chosir l'arrête que vous souhaitez supprimer :",
            "Suppression d'une arrête", JOptionPane.QUESTION_MESSAGE, null, listeNomsArretes, listeNomsArretes[0]); 



           for(int i = 0; i < listeSommets.size(); i++){
                    if(listeSommets.get(i).getNom().equals(g.getEdge(edge).getNode0().getId()) ){
                        listeSommets.get(i).setDegre(listeSommets.get(i).getDegre() - 1);
                        listeSommets.get(i).getSommetsAdjacents().remove(g.getEdge(edge).getNode1().getId());
                    }

                } 

                for(int i = 0; i < listeSommets.size(); i++){
                    if(listeSommets.get(i).getNom().equals(g.getEdge(edge).getNode1().getId()) ){
                        listeSommets.get(i).setDegre(listeSommets.get(i).getDegre() - 1);
                        listeSommets.get(i).getSommetsAdjacents().remove(g.getEdge(edge).getNode0().getId());
                    }

                } 

           g.removeEdge(edge);

           for(int i = 0; i < listeArretes.size(); i++){
                if(listeArretes.get(i).getId().equals(edge)){
                       listeArretes.remove(i);
                }
            } 

           updateTable();
        }
               
        
       
    }//GEN-LAST:event_jButton4ActionPerformed

    
    public void updateTable(){
       
        int sumDegrees = 0;
        int order = 0;
        boolean connexity = false;
        
        
        modele.supprimeToutesLesLigne();
        System.out.println("test");
        for(int i = 0; i < listeSommets.size(); i++){
            
           sumDegrees += listeSommets.get(i).getDegre();
           order++;
           Object[] row = { listeSommets.get(i).getNom(), listeSommets.get(i).toStringSommetsAdjacents() , listeSommets.get(i).getDegre()};
           modele.addRow(row);
        }  
        
        ConnectedComponents cc = new  ConnectedComponents();
        cc.init(g);
        
        if(cc.getConnectedComponentsCount() == 1){
            connexityField.setText("Oui");
        }
        else{
            connexityField.setText("Non");
        }
        
        
        sumDegreesField.setText(Integer.toString(sumDegrees));
        orderField.setText(Integer.toString(order));
        sizeField.setText(Integer.toString(sumDegrees / 2));
       
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Fenetre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollerTableau1;
    private javax.swing.JTable Table1;
    private javax.swing.JTextField connexityField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTextField orderField;
    private javax.swing.JPanel panel1;
    private javax.swing.JTextField sizeField;
    private javax.swing.JTextField sumDegreesField;
    // End of variables declaration//GEN-END:variables
}
